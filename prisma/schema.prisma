// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  name         String
  email        String   @unique
  passwordHash String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relationships
  polls Poll[]
  votes Vote[]

  @@map("users")
}

model Poll {
  id          String   @id @default(cuid())
  question    String
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  creator   User         @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId String
  options   PollOption[]
  votes     Vote[]

  @@map("polls")
}

model PollOption {
  id   String @id @default(cuid())
  text String

  // Relationships
  poll   Poll   @relation(fields: [pollId], references: [id], onDelete: Cascade)
  pollId String
  votes  Vote[]

  @@map("poll_options")
}

model Vote {
  id String @id @default(cuid())

  // Relationships (Many-to-Many between User and PollOption)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  pollOption   PollOption @relation(fields: [pollOptionId], references: [id], onDelete: Cascade)
  pollOptionId String
  Poll         Poll?      @relation(fields: [pollId], references: [id])
  pollId       String?

  @@unique([userId, pollOptionId])
  @@map("votes")
}
